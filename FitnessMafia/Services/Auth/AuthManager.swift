//
//  AuthManager.swift
//  FitnessMafia
//
//  Created by Francisco Alderete on 18/09/2025.
//

import Foundation
import Supabase
import Combine

class AuthManager: ObservableObject {
    @Published var isAuthenticated = false
    @Published var currentUser: User?
    @Published var isLoading = false
    @Published var errorMessage: String?

    private let supabase = SupabaseConfig.shared.client
    private var cancellables = Set<AnyCancellable>()

    init() {
        // Check for existing session on app launch
        Task {
            await checkExistingSession()
        }

        // Listen for auth state changes
        Task {
            await setupAuthStateListener()
        }
    }

    private func checkExistingSession() async {
        do {
            let session = try await supabase.auth.session
            if session.user != nil {
                await MainActor.run {
                    self.isAuthenticated = true
                }
                await loadUserProfile()
            }
        } catch {
            // No existing session, that's fine
            print("No existing session found")
        }
    }

    private func setupAuthStateListener() async {
        let authStateChanges = await supabase.auth.authStateChanges

        for await (event, session) in authStateChanges {
            await MainActor.run {
                switch event {
                case .signedIn:
                    self.isAuthenticated = true
                    self.errorMessage = nil
                    Task {
                        await self.loadUserProfile()
                    }
                case .signedOut:
                    self.isAuthenticated = false
                    self.currentUser = nil
                    self.errorMessage = nil
                case .tokenRefreshed:
                    // Session refreshed, no action needed
                    break
                case .userUpdated:
                    // User updated, reload profile
                    Task {
                        await self.loadUserProfile()
                    }
                case .passwordRecovery:
                    // Handle password recovery if needed
                    break
                @unknown default:
                    // Handle any future auth events
                    break
                }
            }
        }
    }

    func signUp(email: String, password: String, username: String, firstName: String, lastName: String) async throws {
        await MainActor.run {
            self.isLoading = true
            self.errorMessage = nil
        }

        do {
            // Sign up with Supabase Auth
            try await supabase.auth.signUp(
                email: email,
                password: password
            )

            // After successful signup, create user profile in database
            // Note: This will be called after email verification in production
            // For now, we'll create the profile immediately
            try await createUserProfile(email: email, username: username, firstName: firstName, lastName: lastName)

            await MainActor.run {
                self.isLoading = false
            }

        } catch {
            await MainActor.run {
                self.isLoading = false
                self.errorMessage = getErrorMessage(from: error)
            }
            throw error
        }
    }

    func signIn(email: String, password: String) async throws {
        await MainActor.run {
            self.isLoading = true
            self.errorMessage = nil
        }

        do {
            try await supabase.auth.signIn(
                email: email,
                password: password
            )

            await MainActor.run {
                self.isLoading = false
            }

            // User profile will be loaded via auth state change listener

        } catch {
            await MainActor.run {
                self.isLoading = false
                self.errorMessage = getErrorMessage(from: error)
            }
            throw error
        }
    }

    func signOut() async throws {
        await MainActor.run {
            self.isLoading = true
            self.errorMessage = nil
        }

        do {
            try await supabase.auth.signOut()
            await MainActor.run {
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                self.isLoading = false
                self.errorMessage = getErrorMessage(from: error)
            }
            throw error
        }
    }

    private func createUserProfile(email: String, username: String, firstName: String, lastName: String) async throws {
        let newUser = User(
            id: 0, // Will be auto-generated by the database
            username: username,
            email: email,
            role: .user,
            firstName: firstName,
            lastName: lastName,
            isActive: true,
            createdAt: Date(),
            updatedAt: Date()
        )

        try await supabase
            .from("users")
            .insert(newUser)
            .execute()
    }

    func loadUserProfile() async {
        do {
            guard let user = supabase.auth.currentUser else { return }

            let userProfile: User = try await supabase
                .from("users")
                .select()
                .eq("email", value: user.email!)
                .single()
                .execute()
                .value

            await MainActor.run {
                self.currentUser = userProfile
            }
        } catch {
            print("Error loading user profile: \(error)")
            await MainActor.run {
                self.errorMessage = getErrorMessage(from: error)
            }
        }
    }

    private func getErrorMessage(from error: Error) -> String {
        let errorMessage = error.localizedDescription.lowercased()

        if errorMessage.contains("invalid") || errorMessage.contains("wrong") {
            return "Credenciales inválidas. Verifica tu email y contraseña."
        } else if errorMessage.contains("already") || errorMessage.contains("exists") {
            return "Ya existe una cuenta con este email."
        } else if errorMessage.contains("not found") || errorMessage.contains("user") {
            return "No se encontró una cuenta con este email."
        } else if errorMessage.contains("confirm") || errorMessage.contains("email") {
            return "Por favor confirma tu email antes de iniciar sesión."
        } else {
            return "Error de autenticación: \(error.localizedDescription)"
        }
    }
}
